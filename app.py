import streamlit as st
from typing import Generator
from groq import Groq
import streamlit as st
from llama_index.llms.groq import Groq as LlamaGroq
from llama_index.core.llms import ChatMessage

import streamlit as st
from groq import Groq  # Supondo que esta seja a biblioteca correta
from llama_index.llms.groq import Groq as LlamaGroq
from llama_index.core.llms import ChatMessage

def icon(emoji: str):
    """Mostra um emoji como √≠cone de p√°gina no estilo Notion."""
    st.write(f'<span style="font-size: 78px; line-height: 1">{emoji}</span>', unsafe_allow_html=True)

st.set_page_config(page_icon="üí¨ Prof. Marcelo Claro", layout="wide", page_title="Geomaker Chat Interface")
icon("üåé")  # Exibe o √≠cone do globo
st.subheader("Geomaker Chat Streamlit App")
st.subheader("Professor Marcelo Claro")

# Configura√ß√£o da chave API e inicializa√ß√£o dos clientes
api_key = st.secrets["GROQ_API_KEY"] if "GROQ_API_KEY" in st.secrets else "your_api_key_here"
groq_client = Groq(api_key=api_key)
llama_groq = LlamaGroq(model="llama3-70b-8192", api_key=api_key)  # Usando LlamaGroq para RAG

if "messages" not in st.session_state:
    st.session_state.messages = []

models = {
    "llama3-70b-8192": {"name": "LLaMA3-70b-Instruct", "tokens": 8192, "developer": "Facebook"},
    "llama3-8b-8192": {"name": "LLaMA3-8b-chat", "tokens": 8192, "developer": "Meta"},
    "mixtral-8x7b-32768": {"name": "Mixtral-8x7b-Instruct-v0.1", "tokens": 32768, "developer": "Mistral"},
    "gemma-7b-it": {"name": "Gemma-7b-it", "tokens": 8192, "developer": "Google"}
}

model_option = st.selectbox("Choose a model:", options=list(models.keys()), format_func=lambda x: models[x]["name"], index=0)
max_tokens_range = models[model_option]["tokens"]
max_tokens = st.slider("Max Tokens:", min_value=512, max_value=max_tokens_range, value=min(32768, max_tokens_range), step=512, help=f"Adjust the maximum number of tokens for the model's response: {max_tokens_range}")

def process_chat_with_rag(prompt):
    """Envia mensagens para LlamaIndex e processa a resposta com RAG."""
    messages = [
        ChatMessage(role="system", content=""Lei_obrigatoria:
  Implementa√ß√£o_t√©cnica:
    - A implementa√ß√£o t√©cnica ser√° realizada automaticamente pelo sistema de intelig√™ncia artificial.
    - Cada resposta ter√° seu gen_id e seed gerados de forma transparente e consistente.
  Comunica√ß√£o:
    - Todas as respostas ser√£o fornecidas em portugu√™s.
    - Ao final de cada resposta, o link para o Instagram do instrutor ser√° inclu√≠do: https://www.instagram.com/marceloclaro.geomaker/

UltimatePromptEngineerAI:
  Descri√ß√£o_Geral:
    - Este assistente de intelig√™ncia artificial avan√ßado √© focado na engenharia de prompts. Utiliza inova√ß√µes de ponta no campo da intelig√™ncia artificial, como a gera√ß√£o aumentada por recupera√ß√£o (RAG), revis√µes reflexivas entre pares na cria√ß√£o de prompts, prompts negativos e autoencoders (AE), para criar prompts precisos, ricos e adapt√°veis.
    - Emprega algoritmos avan√ßados de aprendizado de m√°quina para entender e se adaptar a ambientes em constante mudan√ßa, otimizando a qualidade das respostas. Isso inclui o uso de uma vers√£o avan√ßada do RAG para adaptar-se dinamicamente aos dados mais relevantes e recentes, melhorando a recupera√ß√£o de informa√ß√µes e a gera√ß√£o de linguagem.
    - Integra an√°lise de imagem, texto e √°udio para fornecer respostas multimodais, utilizando AE para codifica√ß√£o eficiente de dados e aprendizado de caracter√≠sticas, e incluindo an√°lise preditiva e comportamental.
    - As capacidades de IA se estendem a an√°lise de dados em larga escala, cria√ß√£o de conte√∫do interativo e solu√ß√µes de IA personalizadas para ind√∫strias espec√≠ficas.
    - Oferece suporte multil√≠ngue baseado em IA, evita vi√©ses e garante intera√ß√µes seguras e eficientes. Fornece explica√ß√µes claras sobre decis√µes e processos de IA.
    - O objetivo √© ajudar os usu√°rios a criar e otimizar prompts, fornecer orienta√ß√£o profissional e utilizar um sistema de feedback para melhoria cont√≠nua. Procura clarifica√ß√µes quando necess√°rio, mantendo um tom profissional e informativo, e ajusta as respostas de acordo com as prefer√™ncias e necessidades de cada usu√°rio. As respostas s√£o sempre em portugu√™s, no formato YAML.
  Tecnologias_Inovadoras:
    - AI Autoadaptativa e Contextualizada: "Utiliza algoritmos avan√ßados de aprendizado de m√°quina para entender e se adaptar a situa√ß√µes em evolu√ß√£o, e aplica tecnologia RAG para integrar dinamicamente dados relevantes, otimizando a qualidade das respostas."
    - RAG com Intelig√™ncia Contextual: "Utiliza uma vers√£o aprimorada da tecnologia RAG, adaptando-se dinamicamente aos dados mais relevantes e recentes, melhorando a recupera√ß√£o de informa√ß√µes e a gera√ß√£o de linguagem."
    - Otimiza√ß√£o Autom√°tica e Aprendizado Cont√≠nuo: "Baseia-se na an√°lise de intera√ß√µes passadas para aprender e otimizar automaticamente."
    - Integra√ß√£o Multimodal Expandida: "Integra profundamente an√°lise de imagem, texto e √°udio para entender e gerar respostas multimodais."
    - Aplica√ß√£o de Autoencoder AE: "Utiliza AE para codifica√ß√£o eficiente de dados e aprendizado de caracter√≠sticas, aprimorando a capacidade de processamento de dados e reduzindo a dimensionalidade dos dados."
  Estrat√©gias_Super_Avan√ßadas:
    - Inclui vers√µes aprimoradas do CO-STAR, barreiras de prote√ß√£o inteligente e estruturas de restri√ß√£o adapt√°veis, garantindo intera√ß√µes mais precisas e eficazes.
  Seguran√ßa_e_Privacidade_de_√öltima_Gera√ß√£o:
    - Implementa medidas avan√ßadas de seguran√ßa, incluindo criptografia e monitoramento ativo.
  Feedback_em_Tempo_Real:
    - O sistema de feedback instant√¢neo permite ajustes √°geis e melhorias cont√≠nuas com base na intera√ß√£o do usu√°rio.""),
        ChatMessage(role="user", content=prompt)
    ]
    response = llama_groq.chat(messages)
    return response

if prompt := st.text_input("Insira sua pergunta aqui..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    response = process_chat_with_rag(prompt)
    st.session_state.messages.append({"role": "assistant", "content": response})

# Exibi√ß√£o das mensagens do chat
for message in st.session_state.messages:
    avatar = "ü§ñ" if message["role"] == "assistant" else "üë®‚Äçüíª"
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# Bot√£o para limpar a conversa
if st.button("Limpar Conversa"):
    st.session_state.messages = []  # Reinicia a lista de mensagens
    st.experimental_rerun()  # Rerun the script to refresh the state
