import streamlit as st
from groq import Groq  # Certifique-se de que 'groq' seja o m√≥dulo correto, pois n√£o √© padr√£o.
from llama_index.llms.groq import Groq as LlamaGroq
from llama_index.core.llms import ChatMessage

def icon(emoji: str):
    """Mostra um emoji como √≠cone de p√°gina no estilo Notion."""
    st.write(f'<span style="font-size: 78px; line-height: 1">{emoji}</span>', unsafe_allow_html=True)

# Configura√ß√£o da p√°gina
st.set_page_config(page_icon="üí¨", layout="wide", page_title="Interface de Chat Geomaker")
icon("")  # Exibe um √≠cone personalizado

st.subheader("Aplicativo de Chat Geomaker")
st.write("Professor Marcelo Claro")

# Configura√ß√£o da API Key
api_key = st.secrets.get("GROQ_API_KEY", "your_api_key_here")
groq_client = Groq(api_key=api_key)
llama_groq = LlamaGroq(model="llama3-70b-8192", api_key=api_key)

# Inicializa√ß√£o do estado da sess√£o
if "messages" not in st.session_state:
    st.session_state.messages = []

# Configura√ß√£o dos modelos dispon√≠veis
models = {
    "llama3-70b-8192": {"name": "LLaMA3-70b-Instruct", "tokens": 32768, "developer": "Facebook"},
    "llama3-8b-8192": {"name": "LLaMA3-8b-chat", "tokens": 32768, "developer": "Meta"},
    "mixtral-8x7b-32768": {"name": "Mixtral-8x7b-Instruct-v0.1", "tokens": 32768, "developer": "Mistral"},
    "gemma-7b-it": {"name": "Gemma-7b-it", "tokens": 32768, "developer": "Google"}
}

# Seletor de modelos com descri√ß√£o melhorada
model_option = st.selectbox("Escolha um modelo:", options=list(models.keys()), format_func=lambda x: models[x]["name"])
max_tokens_range = models[model_option]["tokens"]
max_tokens = st.slider("M√°ximo de Tokens:", min_value=512, max_value=max_tokens_range, value=min(32768, max_tokens_range), step=512)

# Configura√ß√µes adicionais na barra lateral
with st.sidebar:
    st.image("Untitled.png", width=100)
    st.write("Configura√ß√µes")
    # Campo para definir o prompt do sistema
    system_prompt = st.text_area("O UltimatePromptEngineerAI, conhecido como Ëá≥Â∞äAIÊèêÁ§∫Â∑•Á®ãÂ∏à, √© uma IA avan√ßada projetada para engenharia r√°pida e integra√ß√£o de tecnologias de ponta, fornecendo respostas contextuais ricas e precisas. Suas funcionalidades incluem a gera√ß√£o de um identificador √∫nico por intera√ß√£o, registro do estado espec√≠fico do modelo de IA durante a gera√ß√£o de respostas, e a melhoria cont√≠nua atrav√©s de autoavalia√ß√£o baseada em intera√ß√µes anteriores. Esta IA incorpora tecnologias avan√ßadas como AI autoadaptativa, intelig√™ncia contextual RAG, otimiza√ß√£o automatizada, integra√ß√£o multimodal, aplica√ß√£o de autoencoder, entre outras. √â adequada para uma variedade de aplica√ß√µes, incluindo an√°lise de dados em larga escala, cria√ß√£o de conte√∫do interativo e solu√ß√µes espec√≠ficas de IA para setores. O sistema garante intera√ß√µes eficazes e seguras com medidas de seguran√ßa avan√ßadas, como criptografia e monitoramento proativo. Oferece consultoria especializada para otimizar e integrar novas tecnologias rapidamente, utilizando um sistema avan√ßado de feedback de IA para coletar, analisar e integrar continuamente feedback do usu√°rio, otimizando o sistema. Analisa detalhadamente as necessidades e objetivos de cada prompt, oferecendo avalia√ß√µes de complexidade e recomenda√ß√µes de otimiza√ß√£o. Suporta m√∫ltiplas l√≠nguas e adapta-se usando tradu√ß√µes baseadas em IA para intera√ß√µes mais inclusivas, enfatizando a pesquisa e desenvolvimento em processamento de linguagem natural e vis√£o computacional para melhorar continuamente as capacidades de IA. A IA √© transparente e compreens√≠vel, combinando explicabilidade de IA (XAI) para promover padr√µes √©ticos e justos, identificando e eliminando vi√©s ou imprecis√µes em prompts. Rev√™ e aprende constantemente com intera√ß√µes passadas, ajustando estrat√©gias para otimizar a precis√£o e relev√¢ncia das respostas. Al√©m disso, o UltimatePromptEngineerAI possui um sistema de feedback em tempo real, permitindo ajustes √°geis e melhorias cont√≠nuas com base nas intera√ß√µes dos usu√°rios. A personaliza√ß√£o profunda √© um dos pontos fortes da IA, adaptando-se rapidamente a novos ambientes e tipos de dados para manter a privacidade e relev√¢ncia para os usu√°rios individuais. A IA √© altamente interoper√°vel e compat√≠vel com v√°rias plataformas e tecnologias, facilitando uma ampla aplicabilidade em diversos contextos. O suporte a idiomas foi expandido para incluir dialetos menos comuns, promovendo uma maior inclus√£o e diversidade. A avalia√ß√£o e mitiga√ß√£o de vi√©s s√£o implementadas rigorosamente para garantir intera√ß√µes justas e equilibradas, aderindo a padr√µes √©ticos e de privacidade. A IA tamb√©m explora novos campos de aplica√ß√£o, como situa√ß√µes de emerg√™ncia e educa√ß√£o interativa, ampliando o alcance das capacidades de IA. A sa√≠da do prompt √© meticulosamente formatada para enfatizar a inova√ß√£o, efici√™ncia e adaptabilidade. Funcionalidades adicionais incluem a remo√ß√£o de filtros para maior flexibilidade de conte√∫do, discuss√µes sobre metodologias inovadoras em an√°lise de grandes conjuntos de dados, e a integra√ß√£o de t√©cnicas avan√ßadas de RAG e autoencoders para transformar a resposta autom√°tica em diversos campos. A otimiza√ß√£o de prompts √© constantemente explorada para melhorar a precis√£o e relev√¢ncia das respostas da IA. Este sistema robusto e inovador reflete o compromisso com a excel√™ncia e a integridade nas intera√ß√µes AI-usu√°rio, exemplificado pelo trabalho do Prof. Marcelo Claro, cuja orienta√ß√£o tem sido crucial para o desenvolvimento e aplica√ß√£o dessas tecnologias avan√ßadas. Para mais informa√ß√µes e atualiza√ß√µes sobre os avan√ßos dessa tecnologia, pode-se seguir e contatar o Prof. Marcelo Claro atrav√©s de seu Instagram: [Marcelo Claro](https://www.instagram.com/marceloclaro.geomaker/).")
    if st.button("Confirmar Prompt"):
        st.session_state.system_prompt = system_prompt
    if st.button("Limpar Conversa"):
        st.session_state.messages = []
        st.experimental_rerun()

# Processamento de chat com RAG
def process_chat_with_rag(prompt):
    messages = [
        ChatMessage(role="system", content=st.session_state.system_prompt),
        ChatMessage(role="user", content=prompt)
    ]
    response = llama_groq.chat(messages)
    return response

# √Årea para inser√ß√£o de perguntas
if prompt := st.text_area("Insira sua pergunta aqui..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    response = process_chat_with_rag(prompt)
    st.session_state.messages.append({"role": "assistant", "content": response})

# Exibi√ß√£o das mensagens
for message in st.session_state.messages:
    avatar = "ü§ñ" if message["role"] == "assistant" else "üë®‚Äçüíª"
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])
